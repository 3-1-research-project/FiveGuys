---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - feature/workflows
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

# Remember to set the following secrets in your repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push minitwitimage
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./Dockerfile-minitwit
      #     push: true
      #     tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimage:latest
      #     cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache
      #     cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache,mode=max

      # - name: Build and push mysqlimage
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./Dockerfile-mysql
      #     push: true
      #     tags: ${{ secrets.DOCKER_USERNAME }}/mysqlimage:latest
      #     cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mysqlimage:mysqlbuildcache
      #     cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mysqlimage:mysqlbuildcache,mode=max
      
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY"
          echo "$SSH_KEY" > ~/.ssh/do_ssh_key.key
          chmod 600 ~/.ssh/do_ssh_key.key

          ssh-keyscan 46.101.250.219 >> ~/.ssh/known_hosts
          cat >> ~/.ssh/config <<END
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Copy deployment tools to server
        run: scp -i ~/.ssh/do_ssh_key.key -pr tools/ root@46.101.250.219:/vagrant
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
      
      - name: Deploy to server
        run: ssh root@46.101.250.219 -i ~/.ssh/do_ssh_key.key '/vagrant/deploy.sh'
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

